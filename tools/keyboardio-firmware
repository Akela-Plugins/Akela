#! /bin/sh

set -e

firmware_size () {
	## This is a terrible hack, please don't hurt me. - algernon

	MAX_PROG_SIZE=28672

	output="$($@ | grep "\\(Program\\|Data\\):" | sed -e 's,^,  - ,' && echo)"

	PROGSIZE="$(echo "${output}" | grep Program: | cut -d: -f2 | awk '{print $1}')"

	PERCENT=$(cat <<EOF
scale=2
${PROGSIZE} / ${MAX_PROG_SIZE} * 100
EOF
	)

	PERCENT=$(printf %02.01f $(echo "${PERCENT}" | bc -q))

	echo "${output}" | sed -e "s,\(Program:.*\)(\([0-9\.]*%\) Full),\1(${PERCENT}% Full),"
}

submodule_update () {
    cd $(dirname $0)

    echo Syncing submodules...
    git submodule --quiet sync --recursive

    echo Updating submodules...
    git submodule --quiet update --init --recursive

    echo

    for lib in hardware/keyboardio/avr/libraries/* lib/*; do
        echo Updating $(basename ${lib})...
        (cd $lib; git checkout -q master; git pull -q --ff)
    done
}

find_sketch () {
    for path in "hardware/keyboardio/avr/libraries/Akela-${LIBRARY}/examples/${SKETCH}" \
                    "examples/${LIBRARY}" \
                    "src"; do
        if [ -f "${path}/${SKETCH}.ino" ]; then
            echo "${path}"
            return
        fi
    done
    exit 1
}

flash () {
    cd "$(find_sketch)"
    . ${ROOT}/tools/settings.sh

    echo "Press ENTER when ready..."
    read a

    stty -F /dev/ttyACM* 1200 hupcl
    sleep 3s
    avrdude -q -q -patmega32u4 -cavr109 -D -P /dev/ttyACM* -b57600 "-Uflash:w:${OUTPUT_PATH}/${SKETCH}-latest.hex:i"

    cd "${SOURCEDIR}"
}

build () {
    compile $@
    report_size $@
}

compile () {
    cd "$(find_sketch)"
    . ${ROOT}/tools/settings.sh

    install -d "${OUTPUT_PATH}"

    echo "Building ${OUTPUT_DIR}/${SKETCH} (${LIB_VERSION}) ..."

    ${ARDUINO_BUILDER} \
        -compile \
		    -hardware "${ARDUINO_PATH}/hardware" \
		    -hardware "${ROOT}/hardware" \
		    ${ARDUINO_TOOLS_PARAM} \
		    -tools "${ARDUINO_PATH}/tools-builder" \
		    -fqbn "${FQBN}" \
		    -libraries "${ROOT}/lib" \
		    -libraries "${ROOT}/lib/KeyboardioFirmware/libraries" \
		    -libraries "${ROOT}/hardware" \
		    ${EXTRA_BUILDER_ARGS} \
		    -build-path "${BUILD_PATH}" \
		    -ide-version "${ARDUINO_IDE_VERSION}" \
		    -warnings all \
        ${ARDUINO_VERBOSE} \
		    -prefs "compiler.cpp.extra_flags=-std=c++11 -Woverloaded-virtual -Wno-unused-parameter -Wno-unused-variable -Wno-ignored-qualifiers" \
		    ${ARDUINO_AVR_GCC_PREFIX_PARAM} \
		    "${SKETCH}.ino"

    cp "${BUILD_PATH}/${SKETCH}.ino.hex" "${HEX_FILE_PATH}"
    cp "${BUILD_PATH}/${SKETCH}.ino.elf" "${ELF_FILE_PATH}"
    ln -sf "${OUTPUT_FILE_PREFIX}.hex" "${OUTPUT_PATH}/${SKETCH}-latest.hex"
    ln -sf "${OUTPUT_FILE_PREFIX}.elf" "${OUTPUT_PATH}/${SKETCH}-latest.elf"
	  rm -rf "${BUILD_PATH}"

    cd "${SOURCEDIR}"
}

_find_all () {
    for plugin in hardware/keyboardio/avr/libraries/Akela-*/examples/* \
                      examples/* \
                      src/*.ino; do
        if [ -d "$(dirname ${plugin})" ] || [ -f "${plugin}" ]; then
            basename "${plugin}" .ino
        fi
    done | sort
}

build_all () {
    plugins="$(_find_all)"

    for plugin in ${plugins}; do
        export SKETCH="${plugin}"
        export LIBRARY="${plugin}"
        (build ${plugin})
    done
}

report_size () {
    cd "$(find_sketch)"
    . ${ROOT}/tools/settings.sh

	  echo "- Size: firmware/${LIBRARY}/${OUTPUT_FILE_PREFIX}.elf"
	  firmware_size "${AVR_SIZE}" -C --mcu="${MCU}" "${ELF_FILE_PATH}"
	  echo

    cd "${SOURCEDIR}"
}

size_map () {
    cd "$(find_sketch)"
    . ${ROOT}/tools/settings.sh

    "${AVR_NM}" --size-sort -C -r -l "${ELF_FILE_PATH}"

    cd "${SOURCEDIR}"
}

clean () {
    cd "$(find_sketch)"
    . ${ROOT}/tools/settings.sh

    rm -rf "${OUTPUT_PATH}"

    cd "${SOURCEDIR}"
}

usage () {
    cat <<EOF
Usage: $0 SKETCH commands...

Runs all of the commands in the context of the Sketch.

Available commands:

  help
    This help screen.

  compile
    Compiles the sketch.

  report-size
    Reports the size of the compiled sketch.

  build
    Runs compile and report-size.

  clean
    Cleans up the output directory.

  size-map
    Displays the size map for the sketch.

  flash
    Flashes the firmware using avrdude.

  build-all
    Build all Sketches we can find.
EOF
}

help () {
    usage
}

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

## Parse the command-line
##  - anything that has a =, is an env var
##  - from the remaining stuff, the first one is the Library/Sketch
##  - everything else are commands
##
##  - if there is only one argument, that's a command

ROOT="$(cd $(dirname $0)/..; pwd)"
export ROOT
export SOURCEDIR="$(pwd)"

if [ $# -eq 1 ]; then
    cmd="$(echo $1 | tr '-' '_')"
    ${cmd}
    exit $?
fi

cmds=""

## Export vars
for i in $(seq 1 $#); do
    v="$1"
    shift

    case "${v}" in
        *=*)
            export ${v}
            ;;
        *)
            cmds="${cmds} ${v}"
            ;;
    esac
done

set -- ${cmds}

SKETCH="$1"
shift

cmds=""

for i in $(seq 1 $#); do
    cmds="${cmds} $(echo $1 | tr '-' '_')"
    shift
done

LIBRARY="${SKETCH}"

export SKETCH
export LIBRARY

for cmd in ${cmds}; do
    ${cmd}
done
